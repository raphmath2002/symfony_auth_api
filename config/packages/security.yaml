security:

    providers:
            users:
                entity:
                    # the class of the entity that represents users
                    class: 'Domain\Entity\User'
                    # the property to query by - e.g. email, username, etc
                    property: 'email'

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            entry_point: Infrastructure\Symfony\Security\AuthenticationEntryPoint
            custom_authenticators:
                - Infrastructure\Symfony\Security\ApiKeyAuthenticator


    # # Easy way to control access for large sections of your site
    # # Note: Only the *first* access control that matches will be used
    access_control:
        - {path: ^/api/account, roles: [ROLE_ADMIN, ROLE_USER]}
        #- {path: ^/api, roles: ROLE_ADMIN}
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    
    role_hierarchy:
        ROLE_ADMIN:         ROLE_USER
        ROLE_SUPER_ADMIN:   [ROLE_ADMIN, ROLE_OTHER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
